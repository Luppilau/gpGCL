use std::str::FromStr;
use crate::ast::{Expr, ExprOpcode};
use crate::ast::{LogicalExpr, LogicalOpcode, LogicalExprOpcode};
use crate::ast::{Command, Probability, ProbabilityDistribution};

grammar;

// ----- ARITHMETIC EXPRESSIONS ----- 

pub expr: Box<Expr> = {
  expr expr_op expr_2 => Box::new(Expr::ExprOp(<>)),
  expr_2,
};

expr_2: Box<Expr> = {
  expr_2 expr_2_op var => Box::new(Expr::ExprOp(<>)),
  var,
};

var: Box<Expr> = {
  // float_literal => Box::new(Expr::Float(<>)),
  num_literal => Box::new(Expr::Number(<>)),
  identifier => Box::new(Expr::Variable(<>)),
  "(" <expr> ")",
};


// float_literal: f32 = {
//   r"[+-]?([0-9]*[.])?[0-9]+" => f32::from_str(<>).unwrap(), 
// };

// num_literal: i32 = {
//   r"[0-9]+" => i32::from_str(<>).unwrap(), 
// };

num_literal: f32 = {
  r"[+-]?([0-9]*[.])?[0-9]+" => f32::from_str(<>).unwrap(), 
};

identifier: String = {
  r"[a-zA-Z]+" => <>.to_string(),
};

expr_op: ExprOpcode = { 
  "+" => ExprOpcode::Add,
  "-" => ExprOpcode::Sub,
  ":-" => ExprOpcode::Monus,
};

expr_2_op: ExprOpcode = {
  "*" => ExprOpcode::Mul,
  "/" => ExprOpcode::Div,
  "%" => ExprOpcode::Mod,
};


// ----- LOGICAL EXPRESSIONS ----- 

pub logical_expr: Box<LogicalExpr> = {
  "!" <logical_expr> => Box::new(LogicalExpr::Not(<>)),
  logical_expr_2
};

logical_expr_2: Box<LogicalExpr> = {
  logical_expr_2 logical_op logical_expr_3 => Box::new(LogicalExpr::LogicalOp(<>)),
  logical_expr_3,
};

logical_expr_3: Box<LogicalExpr> = {
  expr logical_expr_op expr  => Box::new(LogicalExpr::LogicalExprOp(<>)),
  "(" <logical_expr> ")",
};


logical_op: LogicalOpcode = {
  "&&" => LogicalOpcode::And,
  "||" => LogicalOpcode::Or,
};

logical_expr_op: LogicalExprOpcode = {
  "==" => LogicalExprOpcode::Equal,
  "!=" => LogicalExprOpcode::Equal,
  "<" => LogicalExprOpcode::LessThan,
  "<=" => LogicalExprOpcode::LessThan,
  ">" => LogicalExprOpcode::GreaterThan,
  ">=" => LogicalExprOpcode::GreaterThan,
};

// ----- COMMANDS -----

pub command: Box<Command> = {
  <command> ";" <command_2> => Box::new(Command::Sequence(<>)),
  command_2,
}

command_2: Box<Command> = {
  "{" <command> "}" "["  "]" "{" <command> "}" => Box::new(Command::NondeterministicChoice(<>)),
  "{" <command> "}" "[" <probability> "]" "{" <command> "}" => Box::new(Command::ProbabilisticChoice(<>)),
  "if" "(" <logical_expr> ")" "{" <command> "}" "else" "{" <command> "}" => Box::new(Command::IfElse(<>)),
  "if" "(" <logical_expr> ")" "{" <command> "}"  => Box::new(Command::If(<>)),
  "while" "(" <logical_expr> ")" "{" <command> "}" => Box::new(Command::While(<>)),
  <identifier> ":=" <expr> => Box::new(Command::Assignment(<>)),
  <identifier> ":=" <probability_distribution> => Box::new(Command::RandomAssignment(<>)),
  command_keyword => Box::new(<>),
}

probability: Probability = {
  num_literal => Probability::Probability(<>),
}

command_keyword: Command = {
  "skip" => Command::Skip,
  "diverge" => Command::Diverge,
  "tick(" <num_literal> ")"  => Command::Tick(<>),
}

probability_distribution: ProbabilityDistribution = {
  "normal(" <num_literal> "," <num_literal> ")" => ProbabilityDistribution::Normal(<>),
  "uniform(" <num_literal> "," <num_literal> ")" => ProbabilityDistribution::Uniform(<>),
  "lognormal(" <num_literal>"," <num_literal> ")" => ProbabilityDistribution::LogNormal(<>),
  "exponential(" <num_literal> ")" => ProbabilityDistribution::Exponential(<>),
}
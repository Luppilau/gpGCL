use std::str::FromStr;
use crate::ast::{LitNumber, LitVariable, ExprOp, Expr, ExprOpcode};
use crate::ast::{LogicalExpr, Not, LogicalOp, LogicalOpcode, LogicalExprOp, LogicalExprOpcode};
use crate::ast::{Command, Sequence, NondetChoice, ProbChoice, IfElse, If, While, Assignment, RandomAssignment, Skip, Diverge, Tick};
use crate::ast::{LitProb, ProbDist, ProbDistNormal, ProbDistUniform, ProbDistLogNormal, ProbDistExponential};


grammar;

// ----- ARITHMETIC EXPRESSIONS ----- 

pub expr: Box<Expr> = {
  <left:expr> <op:expr_op> <right:var> => Box::new(Expr::ExprOp( ExprOp { <> })) ,
  var,
};

var: Box<Expr> = {
  num_literal => Box::new(Expr::Number(<>)),
  identifier => Box::new(Expr::Variable(<>)),
  "(" <expr> ")",
};


num_literal: LitNumber = {
  r"[+-]?([0-9]*[.])?[0-9]+" => LitNumber {value: f32::from_str(<>).unwrap() }, 
};

identifier: LitVariable = {
  r"[a-zA-Z]+" => LitVariable { name: <>.to_string() },
};

expr_op: ExprOpcode = { 
  "+" => ExprOpcode::Add,
  "-" => ExprOpcode::Sub,
  ":-" => ExprOpcode::Monus,
  expr_2_op,
};

expr_2_op: ExprOpcode = {
  "*" => ExprOpcode::Mul,
  "/" => ExprOpcode::Div,
  "%" => ExprOpcode::Mod,
};


// ----- LOGICAL EXPRESSIONS ----- 

pub logical_expr: Box<LogicalExpr> = {
  "!" <expr: logical_expr> => Box::new(LogicalExpr::Not( Not { <> })),
  logical_expr_2
};

logical_expr_2: Box<LogicalExpr> = {
  <left:logical_expr_2> <op:logical_op> <right:logical_expr_3> => Box::new(LogicalExpr::LogicalOp( LogicalOp { <> })),
  logical_expr_3,
};

logical_expr_3: Box<LogicalExpr> = {
  <left:expr> <op:logical_expr_op> <right:expr>  => Box::new(LogicalExpr::LogicalExprOp(LogicalExprOp { <> })),
  "(" <logical_expr> ")",
};


logical_op: LogicalOpcode = {
  "&&" => LogicalOpcode::And,
  "||" => LogicalOpcode::Or,
};

logical_expr_op: LogicalExprOpcode = {
  "==" => LogicalExprOpcode::Equal,
  "!=" => LogicalExprOpcode::NotEqual,
  "<" => LogicalExprOpcode::LessThan,
  "<=" => LogicalExprOpcode::LessThanOrEq,
  ">" => LogicalExprOpcode::GreaterThan,
  ">=" => LogicalExprOpcode::GreaterThanOrEq,
};

// ----- COMMANDS -----

pub command: Box<Command> = {
  <left:command> ";" <right:command_2> => Box::new(Command::Sequence( Sequence { <> })),
  command_2,
}

command_2: Box<Command> = {
  "{" <left:command> "}" "["  "]" "{" <right:command> "}" => Box::new(Command::NondetChoice( NondetChoice { <> })),
  "{" <left:command> "}" "[" <prob:probability> "]" "{" <right:command> "}" => Box::new(Command::ProbChoice(ProbChoice {<>})),
  "if" "(" <condition:logical_expr> ")" "{" <left:command> "}" "else" "{" <right:command> "}" => Box::new(Command::IfElse(IfElse {<>})),
  "if" "(" <condition:logical_expr> ")" "{" <command:command> "}"  => Box::new(Command::If(If {<>})),
  "while" "(" <condition:logical_expr> ")" "{" <command:command> "}" => Box::new(Command::While(While {<>})),
  <name:identifier> ":=" <expr:expr> => Box::new(Command::Assignment(Assignment {<>})),
  <name:identifier> ":=" <distribution:probability_distribution> => Box::new(Command::RandomAssignment(RandomAssignment {<>})),
  command_keyword => Box::new(<>),
}

probability: LitProb = {
  <value:num_literal> => LitProb {<>},
}

command_keyword: Command = {
  "skip" => Command::Skip(Skip {}),
  "diverge" => Command::Diverge(Diverge {}),
  "tick(" <value:num_literal> ")"  => Command::Tick(Tick{<>}),
}

probability_distribution: ProbDist = {
  "normal(" <mean:num_literal> "," <std_dev:num_literal> ")" => ProbDist::Normal(ProbDistNormal {<>}),
  "uniform(" <min:num_literal> "," <max:num_literal> ")" => ProbDist::Uniform(ProbDistUniform {<>}),
  "lognormal("  <mean:num_literal> "," <std_dev:num_literal> ")" => ProbDist::LogNormal(ProbDistLogNormal {<>}),
  "exponential(" <lambda:num_literal> ")" => ProbDist::Exponential(ProbDistExponential {<>}),
}